//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/Player Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c9286764-0c4d-49c8-8878-7d3e1f4c8c3d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70519bf5-fce7-4fb0-a268-3729610c562f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5976c588-f6a0-4672-b35d-97673f085802"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9df068d4-9097-4a5a-82bb-e1297b0f617f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""342184a9-d505-4a59-be6a-b99ea2b57741"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9dfb972d-26a1-4337-86d1-987329e75d16"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19f4eb3b-65bf-4a92-9b9f-2f51ea8a6e60"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8bd9d3e8-25de-40a5-93a3-8df231125a9b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""37cca59e-7483-491c-9d10-02c0dddc7a92"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""8eb8d84a-b105-42dd-b30e-3fe1c72cedb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3dcb017-40f2-4291-a1c9-dd63cd6355d3"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5e57b7ee-6508-4387-937f-2776976c1126"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b422a7f7-1f64-463f-80f5-525f1f2842e3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b00a1114-7e61-4d1c-bda9-da0413d1261d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""149846a4-93fb-4636-adc6-685f689c850c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef1d5cd6-7865-46d3-a780-d51094f2444b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55ff71e-00e7-4cdf-be8f-d929fe5bb012"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ecbdcad-3246-4b99-b954-d8b9e81c902a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementEffects"",
            ""id"": ""43776d17-e572-4af4-9c9a-1dd75d7bfa4a"",
            ""actions"": [
                {
                    ""name"": ""SprintEnabled"",
                    ""type"": ""Button"",
                    ""id"": ""8dd553e2-d9f4-4755-a819-736cf9136e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintDisabled"",
                    ""type"": ""Button"",
                    ""id"": ""8fba9cf3-7000-4f50-af2c-26e3172e59ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""523baf88-302a-4cc6-a5da-b4e35150dc01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d60f4ad8-250b-4263-9eca-f55a969b477a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintDisabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""412c2e31-5086-4677-a62a-915a293c452e"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintDisabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76039012-20d6-4adc-890a-c279c9df86a9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2565274d-b5a2-4ce6-8596-10142d523bed"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7709a411-3bb1-4e15-a9e9-9a58ca556d66"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""095aec14-1e85-412d-a3bf-3a62025b7a33"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapons"",
            ""id"": ""62322f4a-738b-4816-99df-53d2f77f47e8"",
            ""actions"": [
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""88592a93-052e-447b-9e88-9e459b4e8ca5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootEnable"",
                    ""type"": ""Button"",
                    ""id"": ""99dc77a1-2ddf-44b6-9cbe-7debc7e3b12b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootDisable"",
                    ""type"": ""Button"",
                    ""id"": ""dc90dac4-3324-4f32-9cff-c858cf0b9d14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""e1961232-7569-4bbe-afe4-5a10b4fbe4a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeaponGamepad"",
                    ""type"": ""Button"",
                    ""id"": ""3020e1d0-5590-4af0-b046-9b031a8e4e77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeaponOne"",
                    ""type"": ""Button"",
                    ""id"": ""13ecb006-fc46-41aa-b318-d098b439c8e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeaponTwo"",
                    ""type"": ""Button"",
                    ""id"": ""d0fa7f79-dcdd-4c55-bb6b-776bcab3be79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c4cb543-3c4e-4694-8807-41d03267e8fe"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce8d3b2f-74cc-4712-9668-bfadbe07c3b6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""164e821a-c723-441b-ac52-dc3a36c2d901"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootEnable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34024840-99d8-4ab1-92f4-1580f696799c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootEnable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2f33665-a2e1-4d00-899e-f8fe6d20f190"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab661da3-4f82-4114-ac68-4dc4cb92b214"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fd15043-4dca-4835-ab2e-34bb336fe69e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cab782-ee55-431b-91a8-1f6341e024a4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58389ef0-f8bb-495c-b23d-b56ba80f8c04"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fba04dc6-258e-4efa-9618-ccac2b9be624"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e1a10fe-8479-4d8f-905c-33e1311991ee"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeaponTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OtherControls"",
            ""id"": ""d1bbf659-ae45-4296-8ae2-080beddf708f"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9d9cfb4c-b5fb-4286-af69-e71c5817b055"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""512bc7fc-764f-4953-8383-7e106fc523fa"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4f5e6ce-e410-410a-b5b7-2a94b1fb8b10"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Look = m_Movement.FindAction("Look", throwIfNotFound: true);
        // MovementEffects
        m_MovementEffects = asset.FindActionMap("MovementEffects", throwIfNotFound: true);
        m_MovementEffects_SprintEnabled = m_MovementEffects.FindAction("SprintEnabled", throwIfNotFound: true);
        m_MovementEffects_SprintDisabled = m_MovementEffects.FindAction("SprintDisabled", throwIfNotFound: true);
        m_MovementEffects_Crouch = m_MovementEffects.FindAction("Crouch", throwIfNotFound: true);
        // Weapons
        m_Weapons = asset.FindActionMap("Weapons", throwIfNotFound: true);
        m_Weapons_ADS = m_Weapons.FindAction("ADS", throwIfNotFound: true);
        m_Weapons_ShootEnable = m_Weapons.FindAction("ShootEnable", throwIfNotFound: true);
        m_Weapons_ShootDisable = m_Weapons.FindAction("ShootDisable", throwIfNotFound: true);
        m_Weapons_Reload = m_Weapons.FindAction("Reload", throwIfNotFound: true);
        m_Weapons_SwitchWeaponGamepad = m_Weapons.FindAction("SwitchWeaponGamepad", throwIfNotFound: true);
        m_Weapons_SwitchWeaponOne = m_Weapons.FindAction("SwitchWeaponOne", throwIfNotFound: true);
        m_Weapons_SwitchWeaponTwo = m_Weapons.FindAction("SwitchWeaponTwo", throwIfNotFound: true);
        // OtherControls
        m_OtherControls = asset.FindActionMap("OtherControls", throwIfNotFound: true);
        m_OtherControls_Interact = m_OtherControls.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Look;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Look => m_Wrapper.m_Movement_Look;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // MovementEffects
    private readonly InputActionMap m_MovementEffects;
    private IMovementEffectsActions m_MovementEffectsActionsCallbackInterface;
    private readonly InputAction m_MovementEffects_SprintEnabled;
    private readonly InputAction m_MovementEffects_SprintDisabled;
    private readonly InputAction m_MovementEffects_Crouch;
    public struct MovementEffectsActions
    {
        private @PlayerInput m_Wrapper;
        public MovementEffectsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SprintEnabled => m_Wrapper.m_MovementEffects_SprintEnabled;
        public InputAction @SprintDisabled => m_Wrapper.m_MovementEffects_SprintDisabled;
        public InputAction @Crouch => m_Wrapper.m_MovementEffects_Crouch;
        public InputActionMap Get() { return m_Wrapper.m_MovementEffects; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementEffectsActions set) { return set.Get(); }
        public void SetCallbacks(IMovementEffectsActions instance)
        {
            if (m_Wrapper.m_MovementEffectsActionsCallbackInterface != null)
            {
                @SprintEnabled.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintEnabled.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintEnabled.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintDisabled.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @SprintDisabled.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @SprintDisabled.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @Crouch.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouch;
            }
            m_Wrapper.m_MovementEffectsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SprintEnabled.started += instance.OnSprintEnabled;
                @SprintEnabled.performed += instance.OnSprintEnabled;
                @SprintEnabled.canceled += instance.OnSprintEnabled;
                @SprintDisabled.started += instance.OnSprintDisabled;
                @SprintDisabled.performed += instance.OnSprintDisabled;
                @SprintDisabled.canceled += instance.OnSprintDisabled;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
            }
        }
    }
    public MovementEffectsActions @MovementEffects => new MovementEffectsActions(this);

    // Weapons
    private readonly InputActionMap m_Weapons;
    private IWeaponsActions m_WeaponsActionsCallbackInterface;
    private readonly InputAction m_Weapons_ADS;
    private readonly InputAction m_Weapons_ShootEnable;
    private readonly InputAction m_Weapons_ShootDisable;
    private readonly InputAction m_Weapons_Reload;
    private readonly InputAction m_Weapons_SwitchWeaponGamepad;
    private readonly InputAction m_Weapons_SwitchWeaponOne;
    private readonly InputAction m_Weapons_SwitchWeaponTwo;
    public struct WeaponsActions
    {
        private @PlayerInput m_Wrapper;
        public WeaponsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ADS => m_Wrapper.m_Weapons_ADS;
        public InputAction @ShootEnable => m_Wrapper.m_Weapons_ShootEnable;
        public InputAction @ShootDisable => m_Wrapper.m_Weapons_ShootDisable;
        public InputAction @Reload => m_Wrapper.m_Weapons_Reload;
        public InputAction @SwitchWeaponGamepad => m_Wrapper.m_Weapons_SwitchWeaponGamepad;
        public InputAction @SwitchWeaponOne => m_Wrapper.m_Weapons_SwitchWeaponOne;
        public InputAction @SwitchWeaponTwo => m_Wrapper.m_Weapons_SwitchWeaponTwo;
        public InputActionMap Get() { return m_Wrapper.m_Weapons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsActions set) { return set.Get(); }
        public void SetCallbacks(IWeaponsActions instance)
        {
            if (m_Wrapper.m_WeaponsActionsCallbackInterface != null)
            {
                @ADS.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnADS;
                @ADS.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnADS;
                @ADS.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnADS;
                @ShootEnable.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootEnable;
                @ShootEnable.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootEnable;
                @ShootEnable.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootEnable;
                @ShootDisable.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootDisable;
                @ShootDisable.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootDisable;
                @ShootDisable.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnShootDisable;
                @Reload.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnReload;
                @SwitchWeaponGamepad.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponGamepad;
                @SwitchWeaponGamepad.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponGamepad;
                @SwitchWeaponGamepad.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponGamepad;
                @SwitchWeaponOne.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponOne;
                @SwitchWeaponOne.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponOne;
                @SwitchWeaponOne.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponOne;
                @SwitchWeaponTwo.started -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponTwo;
                @SwitchWeaponTwo.performed -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponTwo;
                @SwitchWeaponTwo.canceled -= m_Wrapper.m_WeaponsActionsCallbackInterface.OnSwitchWeaponTwo;
            }
            m_Wrapper.m_WeaponsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ADS.started += instance.OnADS;
                @ADS.performed += instance.OnADS;
                @ADS.canceled += instance.OnADS;
                @ShootEnable.started += instance.OnShootEnable;
                @ShootEnable.performed += instance.OnShootEnable;
                @ShootEnable.canceled += instance.OnShootEnable;
                @ShootDisable.started += instance.OnShootDisable;
                @ShootDisable.performed += instance.OnShootDisable;
                @ShootDisable.canceled += instance.OnShootDisable;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @SwitchWeaponGamepad.started += instance.OnSwitchWeaponGamepad;
                @SwitchWeaponGamepad.performed += instance.OnSwitchWeaponGamepad;
                @SwitchWeaponGamepad.canceled += instance.OnSwitchWeaponGamepad;
                @SwitchWeaponOne.started += instance.OnSwitchWeaponOne;
                @SwitchWeaponOne.performed += instance.OnSwitchWeaponOne;
                @SwitchWeaponOne.canceled += instance.OnSwitchWeaponOne;
                @SwitchWeaponTwo.started += instance.OnSwitchWeaponTwo;
                @SwitchWeaponTwo.performed += instance.OnSwitchWeaponTwo;
                @SwitchWeaponTwo.canceled += instance.OnSwitchWeaponTwo;
            }
        }
    }
    public WeaponsActions @Weapons => new WeaponsActions(this);

    // OtherControls
    private readonly InputActionMap m_OtherControls;
    private IOtherControlsActions m_OtherControlsActionsCallbackInterface;
    private readonly InputAction m_OtherControls_Interact;
    public struct OtherControlsActions
    {
        private @PlayerInput m_Wrapper;
        public OtherControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_OtherControls_Interact;
        public InputActionMap Get() { return m_Wrapper.m_OtherControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OtherControlsActions set) { return set.Get(); }
        public void SetCallbacks(IOtherControlsActions instance)
        {
            if (m_Wrapper.m_OtherControlsActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_OtherControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_OtherControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_OtherControlsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_OtherControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public OtherControlsActions @OtherControls => new OtherControlsActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IMovementEffectsActions
    {
        void OnSprintEnabled(InputAction.CallbackContext context);
        void OnSprintDisabled(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
    }
    public interface IWeaponsActions
    {
        void OnADS(InputAction.CallbackContext context);
        void OnShootEnable(InputAction.CallbackContext context);
        void OnShootDisable(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnSwitchWeaponGamepad(InputAction.CallbackContext context);
        void OnSwitchWeaponOne(InputAction.CallbackContext context);
        void OnSwitchWeaponTwo(InputAction.CallbackContext context);
    }
    public interface IOtherControlsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
