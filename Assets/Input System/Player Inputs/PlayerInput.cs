//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/Player Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c9286764-0c4d-49c8-8878-7d3e1f4c8c3d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70519bf5-fce7-4fb0-a268-3729610c562f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5976c588-f6a0-4672-b35d-97673f085802"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9df068d4-9097-4a5a-82bb-e1297b0f617f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""342184a9-d505-4a59-be6a-b99ea2b57741"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9dfb972d-26a1-4337-86d1-987329e75d16"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19f4eb3b-65bf-4a92-9b9f-2f51ea8a6e60"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8bd9d3e8-25de-40a5-93a3-8df231125a9b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""37cca59e-7483-491c-9d10-02c0dddc7a92"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""8eb8d84a-b105-42dd-b30e-3fe1c72cedb0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3dcb017-40f2-4291-a1c9-dd63cd6355d3"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5e57b7ee-6508-4387-937f-2776976c1126"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b422a7f7-1f64-463f-80f5-525f1f2842e3"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b00a1114-7e61-4d1c-bda9-da0413d1261d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""149846a4-93fb-4636-adc6-685f689c850c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef1d5cd6-7865-46d3-a780-d51094f2444b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f55ff71e-00e7-4cdf-be8f-d929fe5bb012"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ecbdcad-3246-4b99-b954-d8b9e81c902a"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovementEffects"",
            ""id"": ""43776d17-e572-4af4-9c9a-1dd75d7bfa4a"",
            ""actions"": [
                {
                    ""name"": ""SprintEnabled"",
                    ""type"": ""Button"",
                    ""id"": ""8dd553e2-d9f4-4755-a819-736cf9136e79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintDisabled"",
                    ""type"": ""Button"",
                    ""id"": ""8fba9cf3-7000-4f50-af2c-26e3172e59ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchEnable"",
                    ""type"": ""Button"",
                    ""id"": ""523baf88-302a-4cc6-a5da-b4e35150dc01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchDisable"",
                    ""type"": ""Button"",
                    ""id"": ""02824e58-0bec-4aef-b38b-ba618933414c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d60f4ad8-250b-4263-9eca-f55a969b477a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintDisabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""412c2e31-5086-4677-a62a-915a293c452e"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintDisabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76039012-20d6-4adc-890a-c279c9df86a9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2565274d-b5a2-4ce6-8596-10142d523bed"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintEnabled"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7709a411-3bb1-4e15-a9e9-9a58ca556d66"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchEnable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""095aec14-1e85-412d-a3bf-3a62025b7a33"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchEnable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61307412-51ff-4d1f-8183-fdc1f393de4b"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55ed7f65-1582-469c-9d28-2442eeafa72a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Look = m_Movement.FindAction("Look", throwIfNotFound: true);
        // MovementEffects
        m_MovementEffects = asset.FindActionMap("MovementEffects", throwIfNotFound: true);
        m_MovementEffects_SprintEnabled = m_MovementEffects.FindAction("SprintEnabled", throwIfNotFound: true);
        m_MovementEffects_SprintDisabled = m_MovementEffects.FindAction("SprintDisabled", throwIfNotFound: true);
        m_MovementEffects_CrouchEnable = m_MovementEffects.FindAction("CrouchEnable", throwIfNotFound: true);
        m_MovementEffects_CrouchDisable = m_MovementEffects.FindAction("CrouchDisable", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Look;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Look => m_Wrapper.m_Movement_Look;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // MovementEffects
    private readonly InputActionMap m_MovementEffects;
    private IMovementEffectsActions m_MovementEffectsActionsCallbackInterface;
    private readonly InputAction m_MovementEffects_SprintEnabled;
    private readonly InputAction m_MovementEffects_SprintDisabled;
    private readonly InputAction m_MovementEffects_CrouchEnable;
    private readonly InputAction m_MovementEffects_CrouchDisable;
    public struct MovementEffectsActions
    {
        private @PlayerInput m_Wrapper;
        public MovementEffectsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SprintEnabled => m_Wrapper.m_MovementEffects_SprintEnabled;
        public InputAction @SprintDisabled => m_Wrapper.m_MovementEffects_SprintDisabled;
        public InputAction @CrouchEnable => m_Wrapper.m_MovementEffects_CrouchEnable;
        public InputAction @CrouchDisable => m_Wrapper.m_MovementEffects_CrouchDisable;
        public InputActionMap Get() { return m_Wrapper.m_MovementEffects; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementEffectsActions set) { return set.Get(); }
        public void SetCallbacks(IMovementEffectsActions instance)
        {
            if (m_Wrapper.m_MovementEffectsActionsCallbackInterface != null)
            {
                @SprintEnabled.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintEnabled.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintEnabled.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintEnabled;
                @SprintDisabled.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @SprintDisabled.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @SprintDisabled.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnSprintDisabled;
                @CrouchEnable.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchEnable;
                @CrouchEnable.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchEnable;
                @CrouchEnable.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchEnable;
                @CrouchDisable.started -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchDisable;
                @CrouchDisable.performed -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchDisable;
                @CrouchDisable.canceled -= m_Wrapper.m_MovementEffectsActionsCallbackInterface.OnCrouchDisable;
            }
            m_Wrapper.m_MovementEffectsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SprintEnabled.started += instance.OnSprintEnabled;
                @SprintEnabled.performed += instance.OnSprintEnabled;
                @SprintEnabled.canceled += instance.OnSprintEnabled;
                @SprintDisabled.started += instance.OnSprintDisabled;
                @SprintDisabled.performed += instance.OnSprintDisabled;
                @SprintDisabled.canceled += instance.OnSprintDisabled;
                @CrouchEnable.started += instance.OnCrouchEnable;
                @CrouchEnable.performed += instance.OnCrouchEnable;
                @CrouchEnable.canceled += instance.OnCrouchEnable;
                @CrouchDisable.started += instance.OnCrouchDisable;
                @CrouchDisable.performed += instance.OnCrouchDisable;
                @CrouchDisable.canceled += instance.OnCrouchDisable;
            }
        }
    }
    public MovementEffectsActions @MovementEffects => new MovementEffectsActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IMovementEffectsActions
    {
        void OnSprintEnabled(InputAction.CallbackContext context);
        void OnSprintDisabled(InputAction.CallbackContext context);
        void OnCrouchEnable(InputAction.CallbackContext context);
        void OnCrouchDisable(InputAction.CallbackContext context);
    }
}
